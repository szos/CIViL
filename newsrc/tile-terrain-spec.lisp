(in-package :civil-tiles)

(defmixin base-terrain (%mixin)
  ((acceptable-specs :initarg :specs :accessor specs :initform '())
   (acceptable-feats :initarg :feats :accessor feats :initform '())))

(defgeneric terrainp (object terrain))
(defmethod terrainp (obj ter)
  (declare (ignore obj ter))
  nil)

(defgeneric base-terrain (obj)
  (:method (obj) nil))

(defmacro define-terrain (name &optional (superclass '(base-terrain)) slots &rest options)
  `(progn (defclass ,name ,superclass ,slots ,@options)
	  (defmethod terrainp :around ((tile ,name) (terrain (eql ',name))) t)
	  (defmethod base-terrain ((obj ,name)) ',name)))

(define-terrain grassland (base-terrain) ()
  (:default-initargs :specs '(hills fjords)
		     :feats '(woods marsh floodplains)))

(defclass plains (base-terrain) ())
(defmethod terrainp :around ((tile plains) (terrain (eql 'plains)))
  (declare (ignore tile terrain))
  t)
(defmethod base-terrain ((obj plains)) 'plains)
(defclass desert (base-terrain) ())
(defmethod terrainp :around ((tile desert) (terrain (eql 'desert)))
  (declare (ignore tile terrain))
  t)
(defmethod base-terrain ((obj desert)) 'desert)
(defclass tundra (base-terrain) ())
(defmethod terrainp :around ((tile tundra) (terrain (eql 'tundra)))
  (declare (ignore tile terrain))
  t)
(defmethod base-terrain ((obj tundra)) 'tundra)
(defclass snow (base-terrain) ())
(defmethod terrainp :around ((tile snow) (terrain (eql 'snow)))
  (declare (ignore tile terrain))
  t)
(defmethod base-terrain ((obj snow)) 'snow)
